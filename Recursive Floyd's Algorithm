{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6044d98c-7312-41b5-be36-7809efdea930",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after 'for' statement on line 1 (3409085831.py, line 6)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[1], line 6\u001b[1;36m\u001b[0m\n\u001b[1;33m    if start_node == end_node:\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after 'for' statement on line 1\n"
     ]
    }
   ],
   "source": [
    "for intermediate, start_node,end_node\\\n",
    "in itertools.product\\\n",
    "(range(MAX_LENGTH),range(MAX_LENGTH), range(MAX_LENGTH)):\n",
    "# Assume that if start_node and end_node are the same\n",
    "# then the distance would be zero\n",
    "if start_node == end_node:\n",
    "distance[start_node][end_node] = 0\n",
    "continue\n",
    "#return all possible paths and find the minimum\n",
    "distance[start_node][end_node] = min(distance[start_node][end_node],\n",
    "distance[start_node][intermediate] + distance[intermediate][end_node] )\n",
    "#Any value that have sys.maxsize has no path\n",
    "print (distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7c2c9d87-6bf3-427b-978e-b193de7b2bdd",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'graph' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 15\u001b[0m\n\u001b[0;32m      9\u001b[0m                     distance[start_node][end_node] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmin\u001b[39m(\n\u001b[0;32m     10\u001b[0m                         distance[start_node][end_node],\n\u001b[0;32m     11\u001b[0m                         distance[start_node][intermediate] \u001b[38;5;241m+\u001b[39m distance[intermediate][end_node]\n\u001b[0;32m     12\u001b[0m                     )\n\u001b[0;32m     13\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m distance\n\u001b[1;32m---> 15\u001b[0m floyd(\u001b[43mgraph\u001b[49m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'graph' is not defined"
     ]
    }
   ],
   "source": [
    "def floyd(distance):\n",
    "    \"\"\"\n",
    "    An optimized implementation of Floyd's algorithm\n",
    "    \"\"\"\n",
    "    for intermediate in range(MAX_LENGTH):\n",
    "        for start_node in range(MAX_LENGTH):\n",
    "            for end_node in range(MAX_LENGTH):\n",
    "                if start_node != end_node:\n",
    "                    distance[start_node][end_node] = min(\n",
    "                        distance[start_node][end_node],\n",
    "                        distance[start_node][intermediate] + distance[intermediate][end_node]\n",
    "                    )\n",
    "    return distance\n",
    "\n",
    "floyd(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a0597fae-c149-45a4-93af-c375485a7f09",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'graph' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 24\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[38;5;28mprint\u001b[39m(distance)\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# Test the recursive version of Floyd’s algorithm\u001b[39;00m\n\u001b[1;32m---> 24\u001b[0m floyd_recursive(\u001b[43mgraph\u001b[49m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'graph' is not defined"
     ]
    }
   ],
   "source": [
    "def floyd_recursive(distance):\n",
    "    \"\"\"\n",
    "    A corrected and optimized recursive implementation of Floyd's algorithm\n",
    "    \"\"\"\n",
    "    def helper(start_node, end_node, intermediate):\n",
    "        # Base case: If start_node and end_node are the same, distance is zero\n",
    "        if start_node == end_node:\n",
    "            return 0\n",
    "        # Recursive case: Calculate the minimum distance\n",
    "        return min(\n",
    "            helper(start_node, end_node, intermediate),\n",
    "            helper(start_node, intermediate, intermediate) + helper(intermediate, end_node, intermediate)\n",
    "        )\n",
    "\n",
    "    # Perform recursive calls for each combination of nodes\n",
    "    for intermediate in range(MAX_LENGTH):\n",
    "        for start_node in range(MAX_LENGTH):\n",
    "            for end_node in range(MAX_LENGTH):\n",
    "                distance[start_node][end_node] = helper(start_node, end_node, intermediate)\n",
    "\n",
    "    print(distance)\n",
    "\n",
    "# Test the recursive version of Floyd’s algorithm\n",
    "floyd_recursive(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65948440-8d5e-4ae3-bc3b-66e8772b01c8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6bd9b435-b1f0-4207-986e-722f258fa35e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'graph' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 24\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[38;5;28mprint\u001b[39m(distance)\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# Test the recursive version of Floyd’s algorithm\u001b[39;00m\n\u001b[1;32m---> 24\u001b[0m floyd_recursive(\u001b[43mgraph\u001b[49m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'graph' is not defined"
     ]
    }
   ],
   "source": [
    "def floyd_recursive(distance):\n",
    "    \"\"\"\n",
    "    A corrected and optimized recursive implementation of Floyd's algorithm\n",
    "    \"\"\"\n",
    "    def helper(start_node, end_node, intermediate):\n",
    "        # Base case: If start_node and end_node are the same, distance is zero\n",
    "        if start_node == end_node:\n",
    "            return 0\n",
    "        # Recursive case: Calculate the minimum distance\n",
    "        return min(\n",
    "            helper(start_node, end_node, intermediate),\n",
    "            helper(start_node, intermediate, intermediate) + helper(intermediate, end_node, intermediate)\n",
    "        )\n",
    "\n",
    "    # Perform recursive calls for each combination of nodes\n",
    "    for intermediate in range(MAX_LENGTH):\n",
    "        for start_node in range(MAX_LENGTH):\n",
    "            for end_node in range(MAX_LENGTH):\n",
    "                distance[start_node][end_node] = helper(start_node, end_node, intermediate)\n",
    "\n",
    "    print(distance)\n",
    "\n",
    "# Test the recursive version of Floyd’s algorithm\n",
    "floyd_recursive(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d9b31686-445d-480d-aa23-56f1d1a6a6dd",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'graph' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 24\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m distance\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# Test the recursive version of Floyd’s algorithm\u001b[39;00m\n\u001b[1;32m---> 24\u001b[0m result \u001b[38;5;241m=\u001b[39m floyd_recursive(\u001b[43mgraph\u001b[49m)\n\u001b[0;32m     25\u001b[0m \u001b[38;5;28mprint\u001b[39m(result)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'graph' is not defined"
     ]
    }
   ],
   "source": [
    "def floyd_recursive(distance):\n",
    "    \"\"\"\n",
    "    A corrected and optimized recursive implementation of Floyd's algorithm\n",
    "    \"\"\"\n",
    "    def helper(start_node, end_node, intermediate):\n",
    "        # Base case: If start_node and end_node are the same, distance is zero\n",
    "        if start_node == end_node:\n",
    "            return 0\n",
    "        # Recursive case: Calculate the minimum distance\n",
    "        return min(\n",
    "            distance[start_node][end_node],\n",
    "            distance[start_node][intermediate] + distance[intermediate][end_node]\n",
    "        )\n",
    "\n",
    "    # Update the distance matrix using recursion\n",
    "    for intermediate in range(MAX_LENGTH):\n",
    "        for start_node in range(MAX_LENGTH):\n",
    "            for end_node in range(MAX_LENGTH):\n",
    "                distance[start_node][end_node] = helper(start_node, end_node, intermediate)\n",
    "\n",
    "    return distance\n",
    "\n",
    "# Test the recursive version of Floyd’s algorithm\n",
    "result = floyd_recursive(graph)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcd97f31-1732-4be1-a034-7c27803465dc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
